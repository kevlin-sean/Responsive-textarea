name: Publish Package to npmjs

# 当满足以下条件时触发此工作流：
on:
  release:
    types: [published] # 当你在 GitHub 上发布一个新 Release 时
  workflow_dispatch: # 允许手动从 GitHub Actions 页面触发工作流
    inputs:
      version:
        description: "Specify the version to publish (e.g., 1.0.0). Leave blank to auto-detect from package.json"
        required: false
        type: string

# 定义工作流中的任务
jobs:
  build_and_publish:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 运行器上执行任务

    # 权限配置：
    # `contents: read` 允许 Actions 读取仓库内容
    # `id-token: write` 启用 OIDC，对于需要 npm >= 9.5.0 并希望添加 provenance 很有用
    permissions:
      contents: read
      id-token: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x" # 推荐使用最新的 LTS 版本
          registry-url: "https://registry.npmjs.org/" # 指向 npmjs 注册表

      # 3. 安装依赖
      - name: Install dependencies
        run: npm -g install pnpm &&  pnpm install --legacy-peer-deps # 或者 'pnpm install' / 'yarn install --frozen-lockfile'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # 确保在安装私有 peerDeps 时有认证

      # 4. 构建组件库
      - name: Build package
        run: pnpm run build # 执行你在 package.json 中定义的构建脚本

      # 5. 发布到 npm
      - name: Publish to npm
        run: npm publish --access public # --access public 对于非范围包是必需的
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # 使用之前设置的 npm 令牌进行认证
